# -*- coding: utf-8 -*-
"""偏微分.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JjjDnPX1U-ZLPbJKV3rYOe5KgaYaL5wG
"""

def function_2(x):
  return x[0]**2 + x[1]**2

import numpy as np
import matplotlib.pylab as plt

#数値微分(xの時の微分を求めることができる)
def numerical_diff(f, x):
  h = 1e-4 #0.0001
  slope = (f(x + h) - f(x - h)) / 2*h  # 接線の傾き
  return slope

"""x0 = 3, x1 = 4 x0に対する偏微分を求めよ"""

#新しい関数を定義
def function_tmp1(x0):
  return x0*x0 + 4.0**2.0

numerical_diff(function_tmp1, 3.0)

"""x0 = 3, x1 = 4 x1に対する偏微分を求めよ"""

#新しい関数を定義
def function_tmp2(x1):
  return 3.0**2.0 + x1*x1

numerical_diff(function_tmp2, 4.0)

"""x0とx1の偏微分をまとめて計算"""

def numerical_gradient(f, x):
  h = 1e-4 #0.0001
  grad = np.zeros_like(x)#xと同じ形状の配列を生成

  for idx in range(x.size):
    tmp_val = x[idx]
    #f(x+h)の計算
    x[idx] = tmp_val + h
    fxh1 = f(x)

    #f(x-h)の計算
    x[idx] = tmp_val - h
    fxh2 = f(x)

    grad[idx] = (fxh1 - fxh2)/(2*h)
    x[idx] = tmp_val #値を元に戻す

  return grad

numerical_gradient(function_2, np.array([3.0, 4.0]))

